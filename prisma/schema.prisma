generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  message   String
  createdAt DateTime @default(now())
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  summary   String
  img       String
  category  String[]
  fileUrl   String?
  createdAt DateTime @default(now())
}

model BuzzerSession {
  id        String           @id @default(cuid())
  name      String
  createdAt DateTime         @default(now())
  isActive  Boolean          @default(true)
  responses BuzzerResponse[] @relation("SessionResponses")
}

model BuzzerResponse {
  id        String        @id @default(cuid())
  teamName  String
  buzzTime  DateTime      @default(now())
  timeTaken Float?
  sessionId String
  session   BuzzerSession @relation("SessionResponses", fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, teamName])
}

model FinQuestEvent {
  id               Int       @id @default(autoincrement())
  title            String    @unique
  description      String
  semiFinalDate    DateTime
  finalDate        DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  registrations    FinQuestRegistration[]
}

model FinQuestRegistration {
  id          Int       @id @default(autoincrement())
  teamName    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Member 1
  member1Name     String
  member1Email    String
  member1Section  String
  member1Phone    String
  member1Year     String
  member1PGP      String

  // Member 2
  member2Name     String
  member2Email    String
  member2Section  String
  member2Phone    String
  member2Year     String
  member2PGP      String

  // Member 3
  member3Name     String
  member3Email    String
  member3Section  String
  member3Phone    String
  member3Year     String
  member3PGP      String

  // Relation to event
  eventId     Int
  event       FinQuestEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([teamName, eventId])
}
